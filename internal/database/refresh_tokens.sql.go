// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens(token, created_at, updated_at, expires_at, user_id) 
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING token, created_at, updated_at, expires_at, revoked_at, user_id
`

type CreateRefreshTokenParams struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	ExpiresAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresAt,
		arg.UserID,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT refresh_tokens.token, refresh_tokens.user_id FROM refresh_tokens
WHERE refresh_tokens.token = $1 AND 
    (refresh_tokens.revoked_at IS NOT NULL AND refresh_tokens.expires_at >= CURRENT_TIMESTAMP)
`

type GetRefreshTokenRow struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (GetRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i GetRefreshTokenRow
	err := row.Scan(&i.Token, &i.UserID)
	return i, err
}

const getRefreshTokenForUser = `-- name: GetRefreshTokenForUser :one
SELECT refresh_tokens.token, refresh_tokens.user_id FROM refresh_tokens
WHERE refresh_tokens.user_id = $1 AND 
    (refresh_tokens.revoked_at IS NOT NULL AND refresh_tokens.expires_at >= CURRENT_TIMESTAMP)
`

type GetRefreshTokenForUserRow struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) GetRefreshTokenForUser(ctx context.Context, userID uuid.UUID) (GetRefreshTokenForUserRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenForUser, userID)
	var i GetRefreshTokenForUserRow
	err := row.Scan(&i.Token, &i.UserID)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens
SET revoked_at = $2, updated_at = $2
WHERE token = $1
`

type RevokeTokenParams struct {
	Token     string
	RevokedAt sql.NullTime
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeToken, arg.Token, arg.RevokedAt)
	return err
}
