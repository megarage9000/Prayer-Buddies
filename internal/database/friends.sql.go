// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: friends.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const acceptFriendRequest = `-- name: AcceptFriendRequest :one
INSERT INTO friends(user_id, friend_id, status, created_at)
VALUES(
    $1,
    $2,
    'accepted',
    $3
)
RETURNING user_id, friend_id, status, created_at
`

type AcceptFriendRequestParams struct {
	UserID    uuid.UUID
	FriendID  uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) AcceptFriendRequest(ctx context.Context, arg AcceptFriendRequestParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, acceptFriendRequest, arg.UserID, arg.FriendID, arg.CreatedAt)
	var i Friend
	err := row.Scan(
		&i.UserID,
		&i.FriendID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const createFriendRequest = `-- name: CreateFriendRequest :one
INSERT INTO friends(user_id, friend_id, created_at)
VALUES(
    $1,
    $2,
    $3
)
RETURNING user_id, friend_id, status, created_at
`

type CreateFriendRequestParams struct {
	UserID    uuid.UUID
	FriendID  uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) CreateFriendRequest(ctx context.Context, arg CreateFriendRequestParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, createFriendRequest, arg.UserID, arg.FriendID, arg.CreatedAt)
	var i Friend
	err := row.Scan(
		&i.UserID,
		&i.FriendID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const denyFriendRequest = `-- name: DenyFriendRequest :exec
DELETE FROM friends
WHERE friends.user_id = $1 AND friends.friend_id = $2
`

type DenyFriendRequestParams struct {
	UserID   uuid.UUID
	FriendID uuid.UUID
}

func (q *Queries) DenyFriendRequest(ctx context.Context, arg DenyFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, denyFriendRequest, arg.UserID, arg.FriendID)
	return err
}

const getFriendsFromUser = `-- name: GetFriendsFromUser :many
SELECT friends.friend_id FROM friends
WHERE friends.user_id = $1
`

func (q *Queries) GetFriendsFromUser(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getFriendsFromUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var friend_id uuid.UUID
		if err := rows.Scan(&friend_id); err != nil {
			return nil, err
		}
		items = append(items, friend_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFriendRequest = `-- name: UpdateFriendRequest :exec
UPDATE friends
SET status = $3
WHERE friends.user_id = $1 AND friends.friend_id = $2 AND friend.status != 'pending'
`

type UpdateFriendRequestParams struct {
	UserID   uuid.UUID
	FriendID uuid.UUID
	Status   string
}

func (q *Queries) UpdateFriendRequest(ctx context.Context, arg UpdateFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateFriendRequest, arg.UserID, arg.FriendID, arg.Status)
	return err
}
